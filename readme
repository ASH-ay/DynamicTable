# Full Stack Project: React, Node.js, and MongoDB

## Table of Contents
- [Introduction](#introduction)
- [Project Structure](#project-structure)
- [Prerequisites](#prerequisites)
- [Backend Setup (Node.js & MongoDB)](#backend-setup-nodejs--mongodb)
  - [1. Clone the Repository](#1-clone-the-repository)
  - [2. Install Dependencies](#2-install-dependencies)
  - [3. MongoDB Setup](#3-mongodb-setup)
    - [Option 1: MongoDB Atlas (Cloud Service)](#option-1-mongodb-atlas-cloud-service)
    - [Option 2: Local MongoDB](#option-2-local-mongodb)
  - [4. Seed the Database with Sample Data](#4-seed-the-database-with-sample-data)
  - [5. Run the Backend Server](#5-run-the-backend-server)
- [Frontend Setup (React)](#frontend-setup-react)
  - [1. Install Dependencies](#1-install-dependencies-1)
  - [2. Run the React App](#2-run-the-react-app)
- [API Endpoints](#api-endpoints)
- [Troubleshooting](#troubleshooting)
- [Contributing](#contributing)
- [License](#license)

## Introduction

This project is a full-stack web application using React on the frontend, Node.js/Express on the backend, and MongoDB as the database. It includes a dynamic table that fetches and displays data from the backend and supports features like searching, sorting, and pagination.

## Project Structure

```bash
root-directory/
├── backend/            # Node.js/Express backend
│   ├── index.js        # Main server file
│   ├── seed.js         # Script to seed the database
│   ├── users.json      # Sample data file
│   └── package.json    # Node.js dependencies and scripts
└── frontend/           # React frontend
    ├── src/
    │   ├── components/
    │   │   └── DynamicTable.js   # Dynamic table component
    │   ├── App.js                # Main React component
    │   └── index.js              # React entry point
    ├── public/                   # Public files
    └── package.json              # React dependencies and scripts
```

## Prerequisites

Make sure you have the following installed on your machine:
- **Node.js** (v12.x or higher)
- **npm** (v6.x or higher)
- **MongoDB** (either locally installed or use MongoDB Atlas)

## Backend Setup (Node.js & MongoDB)

### 1. Clone the Repository

Clone the repository to your local machine:

```bash
git clone https://github.com/yourusername/your-repo.git
cd your-repo
```
### 2. Install Dependencies
Navigate to the backend directory and install the necessary Node.js dependencies:

```bash

cd backend
npm install
```

### 3. MongoDB Setup

#### Option 1: MongoDB Atlas (Cloud Service)

- **Sign Up:**
  - Go to [MongoDB Atlas](https://www.mongodb.com/cloud/atlas) and sign up for a free account.

- **Create a Cluster:**
  - Follow the prompts to create a new cluster.

- **Create a Database User:**
  - In the security section, create a database user with a username and password.

- **Get Connection String:**
  - Once your cluster is ready, click on "Connect", choose "Connect your application", and copy the connection string.

- **Update `index.js` and `seed.js`:**
  - Replace the MongoDB URI in `index.js` and `seed.js` with your connection string.

#### Option 2: Local MongoDB

- **Install MongoDB:**
  - Follow the [installation guide](https://docs.mongodb.com/manual/installation/) for your operating system.

- **Start MongoDB:**
  - After installation, start the MongoDB server:
 ```bash
    mongod --dbpath /path/to/your/database
    ```

- **Update `index.js` and `seed.js`:**
  - Use the local MongoDB URI (`mongodb://localhost:27017/yourdbname`) in `index.js` and `seed.js`.

### 4. Seed the Database with Sample Data

To populate the database with sample data, run the `seed.js` script:

```bash
node seed.js
```
This script will insert the data from users.json into your MongoDB collection.
### 5. Run the Backend Server

- **Start the Node.js server:**

```bash
  node index.js
```
The server will run on http://localhost:3000.
## Frontend Setup (React)

### 1. Install Dependencies

Navigate to the frontend directory and install the necessary dependencies:

```bash
cd ../frontend
npm install
```
### 2. Run the React App
Start the React development server:

```bash
Copy code
npm start
```
The React app will run on http://localhost:3000 and automatically open in your default web browser.

## API Endpoints
The backend provides the following API endpoints:

- ** GET /users: Fetch all users from the database. **
POST /users: Add a new user to the database.
Request Body Example:

json
{
  "name": "John Doe",
  "email": "john@example.com",
  "age": 30
}
